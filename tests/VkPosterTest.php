<?php

use GuzzleHttp\Client;

use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Response;
use Instagram2Vk\Classes\State;
use Instagram2Vk\Classes\VkPoster;
use GuzzleHttp\Handler\MockHandler;
use Instagram2Vk\Classes\InstagramCrawler;
use Instagram2Vk\Classes\VkPostTimeScheduler;
use Instagram2Vk\Classes\VkPostTransformer;


class VkPosterTest extends PHPUnit_Framework_TestCase
{

    private $transformer = null;
    private $scheduler = null;
    private $client = null;
    private $access_token = null;
    private $state = null;



    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        date_default_timezone_set(getenv('TIMEZONE'));

        $this->transformer = new VkPostTransformer();
        $this->scheduler = new VkPostTimeScheduler();
        $this->scheduler->setScheduleTimeSlots(
            [
                "Mon" => ["12:30", "12:40"],
                "Tue" => [],
                "Wed" => [],
                "Thu" => ["21:30"],
                "Fri" => [],
                "Sat" => [],
                "Sun" => [],
            ]
        );

        $this->client = new Client();
        $this->state = new State(":memory:");

        $this->access_token = getenv('VK_ACCESS_TOKEN');
        $this->instagram_access_token = getenv('INSTAGRAM_ACCESS_TOKEN');
        $this->instagram_access_token_username = getenv('INSTAGRAM_ACCESS_TOKEN_USERNAME');
        $this->group_id = getenv('VK_GROUP_ID');

    }

    /**
     * Call protected/private method of a class.
     *
     * @param object &$object    Instantiated object that we will run method on.
     * @param string $methodName Method name to call
     * @param array  $parameters Array of parameters to pass into method.
     *
     * @return mixed Method return.
     */
    public function invokeMethod(&$object, $methodName, array $parameters = array())
    {
        $reflection = new \ReflectionClass(get_class($object));
        $method = $reflection->getMethod($methodName);
        $method->setAccessible(true);

        return $method->invokeArgs($object, $parameters);
    }



    /**
     * Test gathers next timeslot for posting
     */
    public function test_gather_next_available_timeslot()
    {

        // MOCK HTTP RESPONSES FOR VK.COM
        $mock = new MockHandler([
            // return postponed data
            new Response(200, [], file_get_contents(__DIR__ . "/static/wall_postponed_1.json")),
        ]);

        $handler = HandlerStack::create($mock);
        $client_mocked_vk = new Client(['handler' => $handler]);

        // Crawl new data
        $dataSource = new InstagramCrawler($this->client,
            $this->instagram_access_token,
            [/* no tags */],
            [$this->instagram_access_token_username]
        );


        // Pass data to VK poster
        $poster = new VkPoster(
            $this->scheduler,
            $this->transformer,
            $dataSource,
            $this->client,
            $this->state,
            $this->access_token,
            $this->group_id
        );


        // Call protected methods to get postponed methods
        $postponed = $this->invokeMethod($poster, 'getPostponed', []);
        // set date for postponed post to future
        $postponed[0]['date'] = strtotime("12.04.2035 12:31");

        // calculate last published date from postponed array
        $time = $this->invokeMethod($poster, 'getLastPublishedTime', [$postponed]);

//        echo "\n";
//        echo("last published post: ".date("d.m.Y, H:i:s", $postponed[0]['date'])."\n");
//        echo("last published calculated: ".date("d.m.Y, H:i:s", $time)."\n");

        $this->assertEquals($postponed[0]['date'], $time);
    }


    /**
     * Test whole flow:
     * - get data from Instagram
     * - call data source from Poster
     * - post data to Vk
     */
    public function test_flow_posting_from_instagram_to_vk()
    {

        // MOCK HTTP RESPONSES FOR INSTAGRAM
        $mock = new MockHandler([
            // return answer for username's lookup
            new Response(200, [], file_get_contents(__DIR__ . "/static/lezhnev_user_search.json")),
            // return recent media for username
            new Response(200, [], file_get_contents(__DIR__ . "/static/user_recent.json")),
        ]);

        $handler = HandlerStack::create($mock);
        $client_mocked_instagram = new Client(['handler' => $handler]);

        // MOCK HTTP RESPONSES FOR VK.COM
        $mock = new MockHandler([
            // return postponed data
            new Response(200, [], file_get_contents(__DIR__ . "/static/wall_postponed_0.json")),
        ]);

        $handler = HandlerStack::create($mock);
        $client_mocked_vk = new Client(['handler' => $handler]);

        // Crawl new data
        $dataSource = new InstagramCrawler($client_mocked_instagram,
            $this->instagram_access_token,
            [/* no tags */],
            [$this->instagram_access_token_username]
        );
        $dataSource->crawl();

        // Pass data to VK poster
        $poster = new VkPoster(
            $this->scheduler,
            $this->transformer,
            $dataSource,
            $this->client,
            $this->state,
            $this->access_token,
            $this->group_id
        );

        $poster->run();

    }


}