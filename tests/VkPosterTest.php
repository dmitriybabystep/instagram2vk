<?php

use GuzzleHttp\Client;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Response;
use Instagram2Vk\Classes\InstagramCrawler;
use Instagram2Vk\Classes\VkPoster;
use Instagram2Vk\Classes\VkPostTimeScheduler;
use Instagram2Vk\Classes\VkPostTransformer;


class VkPosterTest extends PHPUnit_Framework_TestCase
{

    private $transformer = null;
    private $scheduler = null;
    private $client = null;
    private $access_token = null;

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->transformer = new VkPostTransformer();
        $this->scheduler = new VkPostTimeScheduler();
        $this->client = new Client();

        $this->access_token = getenv('VK_ACCESS_TOKEN');
        $this->instagram_access_token = getenv('INSTAGRAM_ACCESS_TOKEN');
        $this->instagram_access_token_username = getenv('INSTAGRAM_ACCESS_TOKEN_USERNAME');
        $this->group_id = getenv('VK_GROUP_ID');

    }

    public function test_data_source_call_from_VkPoster()
    {

        // mock data Source
        $sample_data = [
            ["a"],
            ["b"],
        ];
        $dataSource = $this->getMock('Instagram2Vk\Interfaces\DataSourceInterface');
        $dataSource->expects($this->once())->method('getData')->will($this->returnValue($sample_data));

        $poster = new VkPoster(
            $this->scheduler,
            $this->transformer,
            $dataSource,
            $this->client,
            $this->access_token,
            $this->group_id
        );
        $poster->run();

    }


    /**
     * Test whole flow:
     * - get data from Instagram
     * - call data source from Poster
     * - post data to Vk
     */
    public function test_flow_posting_from_instagram_to_vk() {

        // MOCK HTTP RESPONSES FOR INSTAGRAM
        $mock = new MockHandler([
            // return answer for username's lookup
            new Response(200, [], file_get_contents(__DIR__."/static/lezhnev_user_search.json")),
            // return recent media for username
            new Response(200, [], file_get_contents(__DIR__."/static/user_recent.json"))
        ]);

        $handler = HandlerStack::create($mock);
        $client_mocked_instagram = new Client(['handler' => $handler]);

        // MOCK HTTP RESPONSES FOR VK.COM
        $mock = new MockHandler([
            // return answer for username's lookup
            new Response(200, [], file_get_contents(__DIR__."/static/wall_postponed_0.json")),
            // return recent media for username
            new Response(200, [], "")
        ]);

        $handler = HandlerStack::create($mock);
        $client_mocked_vk = new Client(['handler' => $handler]);

        // Crawl new data
        $dataSource = new InstagramCrawler($client_mocked_instagram,
            $this->instagram_access_token,
            [/* no tags */],
            [$this->instagram_access_token_username]
        );
        $dataSource->crawl();

        // Pass data to VK poster
        $poster = new VkPoster(
            $this->scheduler,
            $this->transformer,
            $dataSource,
            $this->client,
            $this->access_token,
            $this->group_id
        );

        //$poster->run();



    }


}